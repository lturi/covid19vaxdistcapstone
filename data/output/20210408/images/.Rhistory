# Basic piechart
ggplot(data_model_results_csv_results[1,6:17], aes(x="", y=t_df[1,2], fill=t_df[1,3])) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Load ggplot2
library(ggplot2)
# Load ggplot2
install.package(ggplot2)
# Load ggplot2
install.packages(ggplot2)
install.packages("ggplot2")
ggplot(data_model_results_csv_results[1,6:17], aes(x="", y=t_df[1,2], fill=t_df[1,3])) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Load ggplot2
#install.packages(ggplot2)
library(ggplot2)
# Basic piechart
ggplot(data_model_results_csv_results[1,6:17], aes(x="", y=t_df[1,2], fill=t_df[1,3])) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(data_model_results_csv_results[,6:17], aes(x="", y=t_df[1,2], fill=t_df[1,3])) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(data_model_results_csv_results, aes(x=t_df[1,2], y=data_model_results_csv_results[1,6:17], fill=t_df[1,3])) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t_df, aes(x=len(t_df), y=data_model_results_csv_results[1,6:17], fill=t_df[1,3])) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t_df, aes(x=12, y=data_model_results_csv_results[1,6:17], fill=t_df[1,3])) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t_df, aes(x="", y=data_model_results_csv_results[1,6:17], fill=t_df[,3])) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t_df, aes(x="", y=t_df$Weight, fill=t_df$Color)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t_df, aes(x="", y=t_df$Weight, fill=t_df$Color)) +
# geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t_df, aes(x="", y=Weight, fill=Color)) +
# geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t_df, aes(x="", y=Weight, fill=Color)) +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t_df, aes(x="", y=Weight, fill=Color)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
, color="white"
, color="white"
# Basic piechart
ggplot(t_df, aes(x="", y=Weight, fill=Color)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t_df, aes(x="", y=Weight/100, fill=Color)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t_df, aes(x="", y=Weight, fill=Color)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t_df, aes(x=15, y=Weight, fill=Color)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t_df, aes(x=data_model_results_csv_results[1,6:17], y=Weight, fill=Color)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
15
# Basic piechart
ggplot(t_df, aes(x=15, y=Weight, fill=Color)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t_df, aes(x=12, y=Weight, fill=Color)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# Basic piechart
ggplot(t_df, aes(x=7, y=Weight, fill=Color)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
# pull just the data from PA from the PVI data repository from the CDC
m_data2 <- read_csv("~/capstone/pvi/data/Model11.2.1/Model_11.2.1_20210408_data.csv", skip=12)
#m_data2 <- m_data2[str_detect(m_data2$name, "Pennsylvania,"), ]
# split state/county to join to census data
county_state1 <- strsplit(m_data$name,",")
#m_data2 <- m_data2[str_detect(m_data2$name, "Pennsylvania,"), ]
# split state/county to join to census data
county_state1 <- strsplit(m_data2$name,",")
str(county_state1)
county_state1[1,]
View(county_state1)
View(county_state1)
county_state1[,1]
county_state1(,1)
dim(count_state1)
dim(county_state1)
#m_data2 <- m_data2[str_detect(m_data2$name, "Pennsylvania,"), ]
# split state/county to join to census data
county_state1 <- data.frame(strsplit(m_data2$name,","))
m_data2$state <-county_state1[1,]
str(m_data2)
summary(m_data2)
View(m_data2)
View(m_data2)
View(m_data2)
View(m_data2)
View(m_data2)
# pull just the data from PA from the PVI data repository from the CDC
m_data2 <- read_csv("~/capstone/pvi/data/Model11.2.1/Model_11.2.1_20210408_data.csv", skip=12)
#m_data2 <- m_data2[str_detect(m_data2$name, "Pennsylvania,"), ]
# split state/county to join to census data
county_state1 <- data.frame(strsplit(m_data2$name,","))
m_data2$state <-county_state1[,1]
summary(m_data2)
str(m_data2)
View(county_state1)
t_cs1 <- transpost(county_state1)
t_cs1 <- transpose(county_state1)
View(t_cs1)
# pull just the data from PA from the PVI data repository from the CDC
m_data2 <- read_csv("~/capstone/pvi/data/Model11.2.1/Model_11.2.1_20210408_data.csv", skip=12)
#m_data2 <- m_data2[str_detect(m_data2$name, "Pennsylvania,"), ]
# split state/county to join to census data
county_state1 <- transpose(data.frame(strsplit(m_data2$name,",")))
m_data2$state <-county_state1[,1]
m_data2$county <-county_state1[,2]
View(m_data2)
m_data2$county <-str_to_upper(county_state1[,2],locale="en")
View(m_data2)
census <- read_csv("cc-est2019-alldata.csv")
census <- read_csv("cc-est2019-alldata.csv")
View(census)
#summary(pa_census_2010_2019)
# we want just 2019, total pop, and just the totals for Hispanic Male, Hispanic Female (summed, then % so that it matches the method
# for percent Black and percent Native American)
attach(census)
hispanic <- census[AGEGRP==0 & YEAR==11,]
remove(census)
View(hispanic)
attach(hispanic)
hispanic<-hispanic[,c("STNAME","CTYNAME","H_MALE","H_FEMALE","TOT_POP")]
#View(hispanic)
hispanic$H <- H_FEMALE+H_MALE
hispanic$percentHispanic <- hispanic$H / hispanic$TOT_POP
#View(hispanic)
attach(hispanic)
hispanic$CTYNAME <- str_to_upper(CTYNAME,locale="en")
hispanic$CTYNAME<-sub('[" "][^.]+$', '', CTYNAME)
hispanic <- hispanic[,c("CTYNAME","percentHispanic")]
census <- read_csv("cc-est2019-alldata.csv")
#summary(pa_census_2010_2019)
# we want just 2019, total pop, and just the totals for Hispanic Male, Hispanic Female (summed, then % so that it matches the method
# for percent Black and percent Native American)
attach(census)
hispanic <- census[AGEGRP==0 & YEAR==11,]
remove(census)
attach(hispanic)
hispanic<-hispanic[,c("STNAME","CTYNAME","H_MALE","H_FEMALE","TOT_POP")]
#View(hispanic)
hispanic$H <- H_FEMALE+H_MALE
hispanic$percentHispanic <- hispanic$H / hispanic$TOT_POP
#View(hispanic)
attach(hispanic)
hispanic$CTYNAME <- str_to_upper(CTYNAME,locale="en")
hispanic$CTYNAME<-sub('[" "][^.]+$', '', CTYNAME)
hispanic$STNAME<- str_to_upper(STNAME,locale="en")
hispanic <- hispanic[,c("STNAME","CTYNAME","percentHispanic")]
View(m_data2)
m_data2$state <-str_to_upper(county_state1[,1],locale="en")
View(m_data2)
#m_data2 <- m_data2[str_detect(m_data2$name, "Pennsylvania,"), ]
# split state/county to join to census data
county_state1 <- transpose(data.frame(strsplit(m_data2$name,",")))
m_data2$state <-str_to_upper(county_state1[,1],locale="en")
colnames(hispanic) <-c("state","county","PctHisp")
hispanic$county <- str_to_upper(county,locale="en")
hispanic$county <- str_to_upper(hispanic$county,locale="en")
merged <- merge(m_data2,hispanic, by = c("state","county"))
merged <- merge(m_data2,hispanic)
merged <- merge.data.frame(m_data2,hispanic)
View(merged)
hispanic <- data.frame(hispanic)
merged <- merge.data.frame(m_data2,hispanic)
m_data2 <- data.frame(m_data2)
merged <- merge.data.frame(m_data2,hispanic)
merged <- merge.data.frame(m_data2,hispanic, by=c("state","county"))
merged <- merge(m_data2,hispanic, by=c("state","county"))
library(plyr)
join(m_data2, hispanic,
type = "inner", by = c("state","county"))
#View(hispanic)
#View(m_data2)
install.packages(plyr)
install.packages("plyr")
library(plyr)
join(m_data2, hispanic,
type = "inner")
merged<-join(m_data2, hispanic,
type = "inner")
remove(county_state1,hispanic,m_data2)
View(merged)
# Now that we've added the appropriate columns, we can clean up the file so it's ready for heads to be applied and run in Toxpi
?join
# pull just the data from PA from the PVI data repository from the CDC
m_data2 <- read_csv("~/capstone/pvi/data/Model11.2.1/Model_11.2.1_20210408_data.csv", skip=12)
#m_data2 <- m_data2[str_detect(m_data2$name, "Pennsylvania,"), ]
# split state/county to join to census data
county_state1 <- transpose(data.frame(strsplit(m_data2$name,",")))
spec(m_data2)
m_data2$state <-str_to_upper(county_state1[,1],locale="en")
m_data2$county <-str_to_upper(county_state1[,2],locale="en")
remove(county_state1)
data.frame(m_data2)
census <- read_csv("cc-est2019-alldata.csv")
#summary(pa_census_2010_2019)
# we want just 2019, total pop, and just the totals for Hispanic Male, Hispanic Female (summed, then % so that it matches the method
# for percent Black and percent Native American)
hispanic <- data.frame(census[AGEGRP==0 & YEAR==11,])
#summary(pa_census_2010_2019)
# we want just 2019, total pop, and just the totals for Hispanic Male, Hispanic Female (summed, then % so that it matches the method
# for percent Black and percent Native American)
hispanic <- data.frame(census[census$AGEGRP==0 & census$YEAR==11,])
remove(census)
attach(hispanic)
hispanic<-hispanic[,c("STNAME","CTYNAME","H_MALE","H_FEMALE","TOT_POP")]
data.frame(m_data2)
m_data2<-data.frame(m_data2)
#View(hispanic)
hispanic$H <- H_FEMALE+H_MALE
hispanic$percentHispanic <- hispanic$H / hispanic$TOT_POP
#View(hispanic)
attach(hispanic)
hispanic$CTYNAME <- str_to_upper(CTYNAME,locale="en")
hispanic$CTYNAME<-sub('[" "][^.]+$', '', CTYNAME)
hispanic$STNAME<- str_to_upper(STNAME,locale="en")
hispanic <- hispanic[,c("STNAME","CTYNAME","percentHispanic")]
colnames(hispanic) <-c("state","county","PctHisp")
hispanic$county <- str_to_upper(hispanic$county,locale="en")
library(plyr)
merged<-join(m_data2, hispanic,
type = "inner", by=c("state","county"),match="first")
hispanic$county <- trim(str_to_upper(hispanic$county,locale="en"))
#View(hispanic)
#View(m_data2)
install.packages("gdata")
library(gdata)
hispanic$county <- trim(str_to_upper(hispanic$county,locale="en"))
hispanic$state<-trim(hispanic$state)
merged<-join(m_data2, hispanic,
type = "inner", by=c("state","county"),match="first")
m_data2$county<-trim(m_data2$county)
merged<-join(m_data2, hispanic,
type = "inner", by=c("state","county"),match="first")
merged<-join(m_data2, hispanic,
type = "inner", by=c("state","county"),match="all")
View(merged)
# Now that we've added the appropriate columns, we can clean up the file so it's ready for heads to be applied and run in Toxpi
remove(county_state1,hispanic,m_data2)
df <- subset(m_data2,select=-c("state","county"))
df <- subset(merged,select=-c("state","county"))
df <- subset(merged,select=-c(state,county))
remove(merged)
View(df)
df %>% tibble %>%
select("row","sid","casrn","name", sort(colnames(.)))
install.packages("dplyr")
library(dplyr)
df %>% tibble %>%
select("row","sid","casrn","name", sort(colnames(.)))
df <-df %>% tibble %>%
select("row","sid","casrn","name", sort(colnames(.)))
write_csv(df,"capstone_model.csv")
df <-df %>% distinct(name, .keep_all = TRUE)
write_csv(df,"capstone_model.csv")
setwd("~/capstone/data/pvi")
library(readr)
X20140408_results <- read_csv("20140408_results.csv")
View(X20140408_results)
data <- read_csv("20140408_results.csv")
cols(
`ToxPi Score` = col_double(),
`HClust Group` = col_double(),
`KMeans Group` = col_double(),
Name = col_character(),
Source = col_character(),
`Transmissible Cases!25!0xcc3333ff` = col_double(),
`Disease Spread!5!0xe05251ff` = col_double(),
`Population Mobility!10!0x57b757ff` = col_double(),
`Residential Density!10!0x70c970ff` = col_double(),
`Social Distancing!10!0x4258c9ff` = col_double(),
`Testing!10!0x5f73ddff` = col_double(),
`Population Demographics!10!0x6b0b9eff` = col_double(),
`Air Pollution!10!0x7e24aeff` = col_double(),
`Age Distribution!10!0x933fbfff` = col_double(),
`Comorbidities!10!0xa95ad2ff` = col_double(),
`Health Disparities!10!0xc177e7ff` = col_double(),
`Hospital Beds!5!0xdb95feff` = col_double()
)
county_state1 <- transpose(data.frame(strsplit(data$name,",")))
county_state1 <- transpose(data.frame(strsplit(data$Name,",")))
data$STNAME <-str_to_upper(county_state1[,1],locale="en")
data$COUNTY_NAM <-str_to_upper(county_state1[,2],locale="en")
remove(county_state1)
data <- data[data$STNAME=="PENNSYLVANIA")
data <- data[data$STNAME=="PENNSYLVANIA"]
data <- data[data$STNAME=="PENNSYLVANIA",]
View(data)
data <- subset(data,select=-c("KMeans Group",Name,Source,STNAME))
data <- subset(data,select=-c(KMeans Group,Name,Source,STNAME))
data <- subset(data,select=-c(KMeans\ Group,Name,Source,STNAME))
data <- subset(data,select=-c('KMeans Group',Name,Source,STNAME))
data <- subset(data,select=-c(3,Name,Source,STNAME))
n <- colnames(data[3:14])
list(n)
n <- str_to_split(n,"!")[1]
lst <- lapply(n, function(vec) unique(unlist(strsplit(vec, "!", perl = T))))
list(lst)
n<- lst[1,]
n<- lst[[1],]
n<- lst[[[1]],]
list(lst[[1]])
list(lst[[2]])
list(lst[1,[2]])
list(lst[1,[[]]])
list(lst[1,])
list(lst[[1]][1,])
list(lst[[1]][1])
list(lst[[1]][2])
list(lst[1,][[1]][1])
View(lst)
df<-data.frame(lst)
df[1,]
df<-transpose(data.frame(lst))
df[1,]
df[,1]
n<-df[,1]
colnames(data[3:14]) <- df[,1]
View(data)
colnames(data[3:14]) <- c(df[,1])
View(data)
colnames(data) <- c("Toxpi Score","HCluster",df[,1],"COUNTY_NAM")
write_csv(df,"pvi/capstone_pvi.csv")
write_csv(data,"pvi/capstone_pvi.csv")
write_csv(data,"capstone_pvi.csv")
images<-paste(1:67)
paste(image_names, "20210408_images_", images, ".svg")
image_names[1:67]
image_names<-[1:67]
image_names<-c([1:67])
image_names<-paste(1:67)
image_names<-paste(images, "20210408_images_", images, ".svg")
image_names<-paste("20210408_images_", images, ".svg")
str(image_names)
image_names<-paste("20210408_images_", images, ".svg",collapse="")
str(image_names)
image_names<-paste("20210408_images_", images, ".svg",collapse="|")
str(image_names)
image_names<-paste("20210408_images_", images, ".svg",sep="")
str(image_names)
image_names<-paste("/images/20210408_images_", images, ".svg",sep="")
str(image_names)
image_names<-data.frame(image_names)
data$toxpi_image <-image_names
write.table(data, file="capstone_pvi.csv", sep=",", row.names = FALSE, quote=FALSE)
View(image_names)
data$toxpi_image <-cbind(image_names)
write.table(data, file="capstone_pvi.csv", sep=",", row.names = FALSE, quote=FALSE)
write.table(data, file="capstone_pvi.csv", sep=",", row.names = FALSE, quote=FALSE)
data$toxpi_image < image_names[1,]
View(data)
data$toxpi_image < image_names[,1]
write.csv2(data, file="capstone_pvi.csv", sep=",", row.names = FALSE, quote=FALSE)
View(image_names)
data$toxpi_image < image_names$image_names
write.csv2(data, file="capstone_pvi.csv", sep=",", row.names = FALSE, quote=FALSE)
write.csv2(data, file="capstone_pvi.csv", quote=FALSE)
?write.csv2
write.csv2(data, file="capstone_pvi.csv", sep=",",row.names=FALSE,quote=FALSE)
data<-data.frame(data)
data$toxpi_image < image_names$image_names
write.csv2(data, file="capstone_pvi.csv", sep=",",row.names=FALSE,quote=FALSE)
image_names<-data.frame(c(1:67),paste("/images/20210408_images_", images, ".svg",sep=""))
View(data)
colnames(image_names)<-c("row","pvi_image_path")
data$row<-seq.int(nrow(data))
merged<-join(data, image_names,
type = "inner", by="row",match="all")
View(merged)
data<-join(data, image_names,
type = "inner", by="row",match="all")
data <- subset(data,select=-c(row))
write.csv2(data, file="capstone_pvi.csv", sep=",",row.names=FALSE,quote=FALSE)
write.csv2(data, file="capstone_pvi.csv", sep=",",row.names=FALSE,quote=FALSE)
write.csv2(data, file="capstone_pvi.csv", sep=",",row.names=FALSE,quote=FALSE)
write_csv(data,"capstone_pvi.csv")quote=FALSE)
write_csv(data,"capstone_pvi.csv",quote=FALSE)
data <- read_csv("20140408_results.csv")
cols(
`ToxPi Score` = col_double(),
`HClust Group` = col_double(),
`KMeans Group` = col_double(),
Name = col_character(),
Source = col_character(),
`Transmissible Cases!25!0xcc3333ff` = col_double(),
`Disease Spread!5!0xe05251ff` = col_double(),
`Population Mobility!10!0x57b757ff` = col_double(),
`Residential Density!10!0x70c970ff` = col_double(),
`Social Distancing!10!0x4258c9ff` = col_double(),
`Testing!10!0x5f73ddff` = col_double(),
`Population Demographics!10!0x6b0b9eff` = col_double(),
`Air Pollution!10!0x7e24aeff` = col_double(),
`Age Distribution!10!0x933fbfff` = col_double(),
`Comorbidities!10!0xa95ad2ff` = col_double(),
`Health Disparities!10!0xc177e7ff` = col_double(),
`Hospital Beds!5!0xdb95feff` = col_double()
)
county_state1 <- transpose(data.frame(strsplit(data$Name,",")))
data$STNAME <-str_to_upper(county_state1[,1],locale="en")
data$COUNTY_NAM <-str_to_upper(county_state1[,2],locale="en")
remove(county_state1)
data <- data[data$STNAME=="PENNSYLVANIA",]
data <- subset(data,select=-c(3,Name,Source,STNAME))
n <- colnames(data[3:14])
lst <- lapply(n, function(vec) unique(unlist(strsplit(vec, "!", perl = T))))
data <- read_csv("20210408_results.csv")
cols(
`ToxPi Score` = col_double(),
`HClust Group` = col_double(),
`KMeans Group` = col_double(),
Name = col_character(),
Source = col_character(),
`Transmissible Cases!25!0xcc3333ff` = col_double(),
`Disease Spread!5!0xe05251ff` = col_double(),
`Population Mobility!10!0x57b757ff` = col_double(),
`Residential Density!10!0x70c970ff` = col_double(),
`Social Distancing!10!0x4258c9ff` = col_double(),
`Testing!10!0x5f73ddff` = col_double(),
`Population Demographics!10!0x6b0b9eff` = col_double(),
`Air Pollution!10!0x7e24aeff` = col_double(),
`Age Distribution!10!0x933fbfff` = col_double(),
`Comorbidities!10!0xa95ad2ff` = col_double(),
`Health Disparities!10!0xc177e7ff` = col_double(),
`Hospital Beds!5!0xdb95feff` = col_double()
)
county_state1 <- transpose(data.frame(strsplit(data$Name,",")))
data$STNAME <-str_to_upper(county_state1[,1],locale="en")
data$COUNTY_NAM <-str_to_upper(county_state1[,2],locale="en")
remove(county_state1)
data <- data[data$STNAME=="PENNSYLVANIA",]
data <- subset(data,select=-c(3,Name,Source,STNAME))
n <- colnames(data[3:14])
lst <- lapply(n, function(vec) unique(unlist(strsplit(vec, "!", perl = T))))
df<-transpose(data.frame(lst))
n<-df[,1]
colnames(data) <- c("Toxpi Score","HCluster",df[,1],"COUNTY_NAM")
image_names<-data.frame(c(1:67),paste("/images/20210408_images_", images, ".svg",sep=""))
colnames(image_names)<-c("row","pvi_image_path")
image_names<-data.frame(image_names)
data<-data.frame(data)
data$row<-seq.int(nrow(data))
data<-join(data, image_names,
type = "inner", by="row",match="all")
data <- subset(data,select=-c(row))
write_csv(data,"capstone_pvi.csv",quote=FALSE)
image_names<-data.frame(c(1:67),paste("/images/20210408_images_", images, ".svg",sep=""))
## add image names
images<-paste(1:67)
image_names<-data.frame(c(1:67),paste("/images/20210408_images_", images, ".svg",sep=""))
colnames(image_names)<-c("row","pvi_image_path")
image_names<-data.frame(image_names)
data<-data.frame(data)
data$row<-seq.int(nrow(data))
data<-join(data, image_names,
type = "inner", by="row",match="all")
data <- subset(data,select=-c(row))
write_csv(data,"capstone_pvi.csv",quote=FALSE)
